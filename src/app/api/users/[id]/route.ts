import client from "@/lib/mongodb";
import {NextResponse} from "next/server"; 
import {clerkClient} from "@clerk/nextjs/server";

export async function GET(
  _req: Request, 
  {params}: {params: Promise<{id: string}>}
){
  console.log(`Attempting to get user data for ${params}`);
  try{
    // Get Parameters
    const clerkId = (await params).id; 
    console.log("clerkId recieved: ", clerkId);
    console.log("clerkId type: ", typeof(clerkId));
    if(!clerkId){
      return NextResponse.json({error: "invalid id"}, {status: 400})
    }

    // connect to db 
    await client.connect()
    const db = client.db("find_all_database")
    console.log("Connected to Database: find_all_database, now getting user data.")
    
    // Get Data 
    let user = await db
      .collection("find_all_users")
      .findOne({clerkId});

    console.log("User Found")
    // If user doesn't exist, create record 
    if(!user){
      console.log("user did not exist, going to create new record")
      // Create user
      try{
        const clerkUser = await (await clerkClient()).users.getUser(clerkId);
        // console.log("ClerkUser: ", clerkUser);
        const emailAddress = clerkUser.emailAddresses[0]?.emailAddress;
        // Inserting New User in Mongo DB.  
        const insertResult = await db.collection("find_all_users").insertOne({
          clerkId: clerkId,
          email: emailAddress, 
          items: []
        });
        console.log(`User ${clerkId} successfully added to mongodb`);
        user = {_id: insertResult.insertedId, clerkId, email: emailAddress, items: []};
      } catch (clerkError) {
        console.log("Clerk API Error: ", clerkError);
        throw clerkError; 
      }
    }          
    console.log("User Items: ", user);
    return NextResponse.json({
      success: true, 
      items: user.items || []
    });
  }
  catch(error){
    console.log("error caught: ", error);
    console.log("error message:", error instanceof Error ? error.message : String(error));
    return NextResponse.json({error: "Unable to manage request"}, {status: 400})
  }
}

export async function POST(
  req: Request,
  {params}: {params: Promise<{id: string}>}
){
  console.log("Inserting new Item");
  try{
    const clerkId = (await params).id;
    const item = await req.json();
    
    console.log("Connecting to DB");
    await client.connect();
    const db = client.db("find_all_database")
    const collection = db.collection("find_all_users");
    console.log("Connected to collection: find_all_users");

    // Add item to collection 
    const result = await collection.updateOne(
      {clerkId},
      {
        $push: {
          items: {
            ...item,
            // _id: new ObjectID(), id will be autogenerated 
            createdAt: new Date(),
            updatedAt: new Date()
          }
        }
      }
    );
    console.log("Item successfully added to db");
    return NextResponse.json({success: true, result});

  } catch (error){
    console.log("error caught: ", error);
    console.log("error message: ", error instanceof Error ? error.message :  String(error));
    return NextResponse.json({error: "Unable to post item request"}, {status: 400})
  } 
}

// DELETE ITEM 
export async function DELETE(
 req: Request, 
 {params} : {params: Promise<{id: string}>}
){
  try{
    // Get User using Clerk Id 
    const clerkId =  (await params).id; 
    const {itemName} = await req.json();
    console.log(`Deleting item: ${itemName} for user: ${clerkId}`);

    // contect to Database 
    console.log("connecting to database");
    await client.connect();
    const db = client.db("find_all_database");
    const collection = db.collection("find_all_users");
    console.log("succesffult connected to db.");
    
    // Modify User by removing item from item array
    const result = await collection.findOneAndUpdate(
      {clerkId: clerkId}, 
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      {$pull: {items: {name: itemName}}} as any
    );
    console.log(`${itemName} successfully delete`);
    // Return Success Message 
    return NextResponse.json({success: true, result}); 
  } catch (error) {
    console.log("error caught: ", error);
    console.log("error message: ", error instanceof Error ? error.message : String(error));
    return NextResponse.json({error: "Unable to delete item"}, {status: 400})
  }
}

